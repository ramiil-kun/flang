-- fLang 2013 (c) Ramiil Hetzer
-- Standart math libriary

func rand
 mul [rand.x], 73
 add [_last], 123
 mod [_last], 607
return [_last]

func fac
 set fac.rezult, 1
 set fac.counter, 1
 label fac_loop
  mul [fac.rezult], [fac.counter]
  set fac.rezult, [_last]
  add [fac.counter], 1
  set fac.counter, [_last]
  more [fac.x], [fac.counter]
 jmp fac_loop
return [fac.rezult]

func pow
 set pow.rezult, 1
 set pow.counter, 1
 eq [pow.y], 0
 jmp pow_end
 label pow_loop
  mul [pow.rezult], [pow.x]
  set pow.rezult, [_last]
  add [pow.counter], 1
  set pow.counter, [_last]
  more [pow.y], [pow.counter]
 jmp pow_loop
 label pow_end
 eq [pow.x], -1
 set pow.rezult, -1
return [pow.rezult]

func sin
 set sin.n, 0
 set sin.rezult, 0
 label sin_loop
  mul [sin.n], 2
  add [_last], 1
  set sin.dx, [_last]
-- 
  pow -1, [sin.n]
  set sin.d_up, [_last]
  pow [sin.x], [sin.dx]
  mul [sin.d_up], [_last]
  set sin.d_up, [_last]
--
  fac [sin.dx]
  div [sin.d_up], [_last]
  add [sin.rezult], [_last]
  set sin.rezult, [_last]
--
  add [sin.n], 1
  set sin.n, [_last]
--
  more [sin.y], [sin.n]
 jmp sin_loop
return [sin.rezult]