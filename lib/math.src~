-- fLang 2013 (c) Ramiil Hetzer
-- Standart math libriary

func rand
 mul [rand.x], 73
 add [_last], 123
 mod [_last], 607
return [_last]

func fac
 set fac.rezult, 1
 set fac.counter, 1
 label fac_loop
  mul [fac.rezult], [fac.counter]
  set fac.rezult, [_last]
  add [fac.counter], 1
  set fac.counter, [_last]
  more [fac.x], [fac.counter]
 jmp fac_loop
return [fac.rezult]

func pow
 set pow.rezult, 1
 set pow.counter, 1
 eq [pow.y], 0
 jmp pow_end
 label pow_loop
  mul [pow.rezult], [pow.x]
  set pow.rezult, [_last]
  add [pow.counter], 1
  set pow.counter, [_last]
  more [pow.y], [pow.counter]
 jmp pow_loop
 label pow_end
 eq [pow.x], -1
 set pow.rezult, -1
return [pow.rezult]

func sin
 set sin.stx, [sin.x]
 set sin.fac, 1
 set sin.t, 0
 set sin.counter, 1
 set sin.sign, 1
 label sin_loop
  mul [sin.stx], [sin.sign]
  add [_last], [sin.t]
  div [_last], [sin.fac]
  set sin.t, [_last]
-- // 
  add [sin.counter], 2
  set sin.counter, [_last] 
-- //
  pow [sin.x], 2
  mul [_last], [sin.stx]
  set sin.stx, [_last]
-- //
  sub [sin.counter], 1
  mul [_last], [sin.counter]
  mul [_last], [sin.fac]
  set sin.fac, [_last]
-- //
  mul [sin.sign], -1
  set sin.sign, [_last]
-- //
  div [sin.stx], [sin.fac]
  more [_last], [sin.y]
   jmp sin_loop
  eq [_last], [sin.y]
   jmp sin_loop
return [sin.t]
