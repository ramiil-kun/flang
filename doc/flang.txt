Стандарт языка FLANG

Оглавление
*Введение
*Запланированные возможности
*Описание языка
**Синтаксис
**Встроенные функции
**Типы аргументов функций
*Особенности реализации


ВВЕДЕНИЕ

Язык FLANG, за свою всего двухлетнюю историю сменил несколько названий BFG(BrainFuck in Grids), BFAC(BF AutoCode), BFIL(Biargumental Functional Interpretive Language) и FAIL(Functional Asm-like Interpretive Language), и прошел долгий путь развития. На данном этапе, в версии 0.8.x реализовано около 70% функционала. Проект языка создан и реализован одним человеком. В данное время, исходные коды интерпретатора удалось собрать в Borland Delphi 7, FreePascal (x86\x64 Win и x86 *nix, а так же ARMv6), что позволяет назвать интерпретатор кроссплатформенным. 


ЗАПЛАНИРОВАННЫЕ ВОЗМОЖНОСТИ

Так как стандарт языка не завершен, и функционал всё ещё добавляется, было бы неосмотрительным не 
предупредить возможного пользователя о том, что некоторые особенности языка будут изменены или вовсе искоренены к финальной версии. Так же будет добавлен новый функционал, который сделает старые приёмы программирования на языке FLANG неэффективными. 

В финальной версии будут добавлены
0. Длинная арифметика.
1. Поддержка переменных, более 4кбайт длинной.
2. Поддержка пользовательских функций.
3. Эмуляция массивов и списков.
4. Валидатор кода и перехват ошибок времени исплнения.
5. Функции для работы со списками и массивами.
6. Простейшие средства отладки.

А так же много мелких исправлений, и самая любопытная опция - интерактивный режим.
В итоге, язык будет иметь все возможности для нормальной работы в текстовом режиме.


ОПИСАНИЕ ЯЗЫКА

Исходный код на языке FLANG представляет собой список команд, разделённых переводом строки. Отступы игнорируются. Комментарии доступны только однострочные, начинаются с символа # или с "//". В начале файла распологаются директивы "include" и описание функций. Далее распологается код программы, заключённый в операторные скобки "begin" и "end".

Библиотечные функции именуются по принципу <имя файла>:<имя функции>, например math:random или math:pow.
Функции внутри программы не требуют особых названий, вы вольны именовать их как вам вздумается. 

Описание функции начинается с опереатора "func <имя функции>", и заканчивается оператором "return <переменная или 
константа>". Всё, что находится внутри, трактуется как код функции.

Каждая функция может иметь 2 аргумента, имеющие предопредопределенные имена "<имя функции>.x" и "<имя функции>.y", 
доступные как любые переменные.

Переменные могут быть объявлены в основной части кода или в функциях. Понятия "локальных переменных" отсутствует, 
все переменные видны из любой точки программы. Объявление переменной и присваивание значения происходит с помощью 
оператора "set <имя>, <значение>". Типизация переменных динамическая, неявная.

Доступ к переменным осуществляется с помощью квадратных скобок, конструкция [<имя переменной>] в качестве агрумента 
функции значит "вставить значение переменной".

Системные переменные, чьё значение устанавливается средой исполнения, доступны только к чтению, при попытки записи 
происходит ошибка.

Таблица системных переменных
+----------+------------------------------------------------------+
| Имя      | Описание                                             |
+----------+------------------------------------------------------+
| _last    | Возвращает последнее значение, возвращённое функцией |
+----------+------------------------------------------------------+
| _ip      | Возвращает номер текущей команды                     |
+----------+------------------------------------------------------+
| _inp     | Вызывает ввод данных с клавиатуры, возвращает        |
|          | введенную строку.                                    |
+----------+------------------------------------------------------+
| _<число> | Возвращает результат исполнения функции в строке с   |
|          | указаным номером.                                    |
+----------+------------------------------------------------------+


ВСТРОЕННЫЕ ФУНКЦИИ

Таблица встроенных функций
+----------+-------------------+------------------+-----------------------------------------+
| Имя      | Кол-во аргументов | Тип возвр. знач. | Описание                                |
+----------+-------------------+------------------+-----------------------------------------+
